/**
 * @fileoverview Unit tests for logger functionality
 */

const { logger } = require('@/utils/common/logger');

describe.skip('Logger', () => {
  let consoleSpy;

  beforeEach(() => {
    consoleSpy = {
      log: jest.spyOn(console, 'log').mockImplementation(),
      error: jest.spyOn(console, 'error').mockImplementation(),
      warn: jest.spyOn(console, 'warn').mockImplementation(),
      info: jest.spyOn(console, 'info').mockImplementation(),
      debug: jest.spyOn(console, 'debug').mockImplementation(),
    };
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

  test('should log info messages', () => {
    const message = 'Test info message';
    logger.info(message);
    expect(consoleSpy.info).toHaveBeenCalledWith(
      expect.stringContaining(message)
    );
  });

  test('should log error messages', () => {
    const message = 'Test error message';
    const error = new Error(message);
    logger.error(error);
    expect(consoleSpy.error).toHaveBeenCalledWith(
      expect.stringContaining(message)
    );
  });

  test('should log warning messages', () => {
    const message = 'Test warning message';
    logger.warn(message);
    expect(consoleSpy.warn).toHaveBeenCalledWith(
      expect.stringContaining(message)
    );
  });

  test('should log debug messages', () => {
    const message = 'Test debug message';
    logger.debug(message);
    expect(consoleSpy.debug).toHaveBeenCalledWith(
      expect.stringContaining(message)
    );
  });

  test('should format error objects', () => {
    const error = new Error('Test error');
    error.code = 'TEST_ERROR';
    logger.error(error);
    expect(consoleSpy.error).toHaveBeenCalledWith(
      expect.stringContaining('TEST_ERROR')
    );
  });

  test('should handle non-error objects in error log', () => {
    const message = 'Test non-error message';
    logger.error(message);
    expect(consoleSpy.error).toHaveBeenCalledWith(
      expect.stringContaining(message)
    );
  });

  test('should handle objects in log messages', () => {
    const obj = { key: 'value' };
    logger.info(obj);
    expect(consoleSpy.info).toHaveBeenCalledWith(
      expect.stringContaining(JSON.stringify(obj))
    );
  });

  test('should handle null and undefined values', () => {
    logger.info(null);
    logger.info(undefined);
    expect(consoleSpy.info).toHaveBeenCalledTimes(2);
  });
});
