/**
 * @jest-environment node
 */

// Mock @prettier/plugin-xml
jest.mock('@prettier/plugin-xml', () => ({
  languages: [],
  parsers: {},
  printers: {},
}));

// Mock prettier
jest.mock('prettier', () => ({
  format: jest.fn((content) => content),
  resolveConfig: jest.fn().mockResolvedValue({}),
}));

// Mock logger
jest.mock('@/utils/common/logger', () => ({
  logger: {
    debug: jest.fn(),
    info: jest.fn(),
    warn: jest.fn(),
    error: jest.fn(),
  },
}));

// Mock paths configuration
jest.mock('@/config/paths', () => ({
  PATHS: {
    output: 'tests/output',
    logs: {
      dir: 'tests/logs',
      latest: 'tests/logs/latest.log',
      history: 'tests/logs/history-%DATE%.log',
    },
  },
}));

// Mock file size utility
jest.mock('@/utils/file-management/get-file-size', () => ({
  getFileSizeKB: jest.fn().mockResolvedValue(1),
}));

// Mock HTML generator
jest.mock('@/utils/template-processor/generators/html', () => {
  const fs = require('fs').promises;
  return {
    generateHtml: jest.fn().mockImplementation(async (content, options) => {
      let htmlContent = content;
      if (options.cssPath) {
        const css = await fs.readFile(options.cssPath, 'utf-8');
        htmlContent = `<!DOCTYPE html>
<html>
<head>
<style>${css}</style>
</head>
<body>
${content}
</body>
</html>`;
      }
      return {
        filepath: options.filepath,
        content: htmlContent,
      };
    }),
  };
});

// Mock markdown generator
jest.mock('@/utils/template-processor/generators/md', () => ({
  generateMarkdown: jest.fn().mockImplementation(async (content, options) => {
    return {
      filepath: options.filepath,
      content: content,
    };
  }),
}));

// Mock PDF generator
jest.mock('@/utils/template-processor/generators/pdf', () => ({
  generatePdf: jest.fn().mockImplementation(async (content, options) => {
    if (content.includes('Invalid Document')) {
      const error = new Error('PDF generation failed due to security restrictions');
      error.code = 'PDF_GENERATION_ERROR';
      throw error;
    }
    return options.outputPath;
  }),
}));

/**
 * @fileoverview Unit tests for template processing functionality
 *
 * Tests cover:
 * 1. Basic template processing
 * 2. Frontmatter handling
 * 3. Missing value handling
 * 4. Array value processing
 * 5. Error cases
 *
 * @module tests/unit/template-processor/core
 * @requires fs
 * @requires path
 * @requires @/utils/template-processor/core/process-template
 */

const fs = require('fs').promises;
const path = require('path');
const {
  processMarkdownTemplate,
  removeFrontmatter,
} = require('@/utils/template-processor/core/process-template');
const testUtils = require('@/utils/test-utils');

describe('Template Processor', () => {
  const TEST_FILES_DIR = path.join(__dirname, 'test-files');
  const TEST_OUTPUT_DIR = path.join(__dirname, 'output');

  // Setup test environment
  beforeAll(async () => {
    // Create test directories if they don't exist
    await fs.mkdir(TEST_FILES_DIR, { recursive: true });
    await fs.mkdir(TEST_OUTPUT_DIR, { recursive: true });
  });

  // Cleanup after tests
  afterAll(async () => {
    try {
      await fs.rm(TEST_FILES_DIR, {
        recursive: true,
        force: true,
      });
      await fs.rm(TEST_OUTPUT_DIR, {
        recursive: true,
        force: true,
      });
    } catch (error) {
      console.warn('Error cleaning up test files:', error);
    }
  });

  describe('Basic Template Processing', () => {
    const SIMPLE_TEMPLATE_PATH = path.join(TEST_FILES_DIR, 'simple.md');
    const SIMPLE_DATA_PATH = path.join(TEST_FILES_DIR, 'simple.csv');

    beforeEach(async () => {
      await fs.writeFile(SIMPLE_TEMPLATE_PATH, 'Hello {{name}}!');
      await fs.writeFile(SIMPLE_DATA_PATH, 'key,value\nname,World');
    });

    test('should process simple template with data', async () => {
      const result = await processMarkdownTemplate(SIMPLE_TEMPLATE_PATH, SIMPLE_DATA_PATH);

      expect(result.content).toMatch(
        /<p>Hello <span class="imported-value" data-field="name">World<\/span>!<\/p>/
      );
      expect(result.files).toEqual(
        expect.objectContaining({
          md: expect.stringContaining('.md'),
          html: expect.stringContaining('.html'),
          pdf: expect.stringContaining('.pdf'),
        })
      );
      expect(result.stats).toEqual(
        expect.objectContaining({
          totalFields: expect.any(Number),
          processedFields: expect.any(Number),
        })
      );
    });

    test('should apply CSS styling when provided', async () => {
      const CSS_PATH = path.join(TEST_FILES_DIR, 'style.css');
      await fs.writeFile(CSS_PATH, 'body { color: red; }');

      const result = await processMarkdownTemplate(
        SIMPLE_TEMPLATE_PATH,
        SIMPLE_DATA_PATH,
        CSS_PATH
      );

      // Verificar que el CSS se incluya en el documento
      const { generateHtml } = require('@/utils/template-processor/generators/html');
      const mockCalls = generateHtml.mock.calls;
      expect(mockCalls.length).toBeGreaterThan(0);
      const lastCall = mockCalls[mockCalls.length - 1];
      expect(lastCall[1].cssPath).toBe(CSS_PATH);

      expect(result.files).toEqual(
        expect.objectContaining({
          md: expect.stringContaining('.md'),
          html: expect.stringContaining('.html'),
          pdf: expect.stringContaining('.pdf'),
        })
      );
    });
  });

  describe('Missing Value Handling', () => {
    const MISSING_TEMPLATE_PATH = path.join(TEST_FILES_DIR, 'missing.md');
    const MISSING_DATA_PATH = path.join(TEST_FILES_DIR, 'missing.csv');

    beforeEach(async () => {
      // Arrange
      await fs.writeFile(MISSING_TEMPLATE_PATH, 'Name: {{name}}, Age: {{age}}');
      await fs.writeFile(MISSING_DATA_PATH, 'key,value\nname,John');
    });

    test('should handle missing values gracefully', async () => {
      // Act
      const result = await processMarkdownTemplate(MISSING_TEMPLATE_PATH, MISSING_DATA_PATH);

      // Assert
      expect(result.content).toMatch(
        /<p>Name: <span class="imported-value" data-field="name">John<\/span>, Age: <span class="missing-value" data-field="age">\[\[age\]\]<\/span><\/p>/
      );
      expect(result.files).toEqual(
        expect.objectContaining({
          md: expect.stringContaining('.md'),
          html: expect.stringContaining('.html'),
          pdf: expect.stringContaining('.pdf'),
        })
      );
    });

    test('should handle nested missing values with full path', async () => {
      // Arrange
      await fs.writeFile(
        MISSING_TEMPLATE_PATH,
        '{{#with user}}Name: {{name}}, Email: {{contact.email}}{{/with}}'
      );
      await fs.writeFile(MISSING_DATA_PATH, 'key,value\nuser.name,John');

      // Act
      const result = await processMarkdownTemplate(MISSING_TEMPLATE_PATH, MISSING_DATA_PATH);

      // Assert
      expect(result.content).toMatch(
        /<p>Name: <span class="imported-value" data-field="user\.name">John<\/span>, Email: <span class="missing-value" data-field="user\.contact\.email">\[\[user\.contact\.email\]\]<\/span><\/p>/
      );
    });

    test('should handle deeply nested contexts with missing values', async () => {
      // Arrange
      await fs.writeFile(
        MISSING_TEMPLATE_PATH,
        `{{#with user}}
          {{#with profile}}
            {{#with contact}}
              Name: {{../name}}, 
              Email: {{email}}, 
              Phone: {{phone}},
              Address: {{address.street}}
            {{/with}}
          {{/with}}
        {{/with}}`
      );
      await fs.writeFile(
        MISSING_DATA_PATH,
        'key,value\nuser.profile.name,John\nuser.profile.contact.email,john@example.com'
      );

      // Act
      const result = await processMarkdownTemplate(MISSING_TEMPLATE_PATH, MISSING_DATA_PATH);

      // Assert
      expect(result.content).toMatch(
        /<span class="imported-value" data-field="user\.profile\.name">John<\/span>/
      );
      expect(result.content).toMatch(
        /<span class="imported-value" data-field="user\.profile\.contact\.email">john@example\.com<\/span>/
      );
      expect(result.content).toMatch(
        /<span class="missing-value" data-field="user\.profile\.contact\.phone">\[\[user\.profile\.contact\.phone\]\]<\/span>/
      );
      expect(result.content).toMatch(
        /<span class="missing-value" data-field="user\.profile\.contact\.address\.street">\[\[user\.profile\.contact\.address\.street\]\]<\/span>/
      );
    });
  });

  describe('Array Value Processing', () => {
    const ARRAY_TEMPLATE_PATH = path.join(TEST_FILES_DIR, 'array.md');
    const ARRAY_DATA_PATH = path.join(TEST_FILES_DIR, 'array.csv');

    beforeEach(async () => {
      // Arrange
      await fs.writeFile(ARRAY_TEMPLATE_PATH, '{{#each items}}{{name}}\n{{/each}}');
      await fs.writeFile(ARRAY_DATA_PATH, 'key,value\nitems.0.name,Item 1\nitems.1.name,Item 2');
    });

    test('should process array values correctly', async () => {
      // Act
      const result = await processMarkdownTemplate(ARRAY_TEMPLATE_PATH, ARRAY_DATA_PATH);

      // Assert
      expect(result.content).toMatch(
        /<p><span class="imported-value" data-field="items\.0\.name">Item 1<\/span><br><span class="imported-value" data-field="items\.1\.name">Item 2<\/span><\/p>/
      );
      expect(result.files).toEqual(
        expect.objectContaining({
          md: expect.stringContaining('.md'),
          html: expect.stringContaining('.html'),
          pdf: expect.stringContaining('.pdf'),
        })
      );
    });
  });

  describe('Frontmatter Handling', () => {
    const FRONTMATTER_TEMPLATE_PATH = path.join(TEST_FILES_DIR, 'frontmatter.md');

    beforeEach(async () => {
      // Arrange
      await fs.writeFile(
        FRONTMATTER_TEMPLATE_PATH,
        '---\ntitle: Test Document\nversion: 1.0\n---\n# Hello {{name}}!'
      );
    });

    test('should remove frontmatter correctly', async () => {
      // Act
      const content = await fs.readFile(FRONTMATTER_TEMPLATE_PATH, 'utf-8');
      const result = removeFrontmatter(content);

      // Assert
      expect(result).toBe('# Hello {{name}}!');
    });

    test('should preserve content without frontmatter', async () => {
      // Arrange
      const contentWithoutFrontmatter = '# Hello {{name}}!';

      // Act
      const result = removeFrontmatter(contentWithoutFrontmatter);

      // Assert
      expect(result).toBe(contentWithoutFrontmatter);
    });
  });

  describe('Image and Link Processing', () => {
    const IMAGE_TEMPLATE_PATH = path.join(TEST_FILES_DIR, 'image.md');
    const LINK_TEMPLATE_PATH = path.join(TEST_FILES_DIR, 'link.md');

    beforeEach(async () => {
      await fs.writeFile(IMAGE_TEMPLATE_PATH, '![Test]({{imagePath}})');
      await fs.writeFile(LINK_TEMPLATE_PATH, '[Link]({{url}})');
    });

    test('should handle images with proper alt text', async () => {
      // Crear una imagen de prueba
      const IMAGE_PATH = path.join(TEST_FILES_DIR, 'test.png');
      await fs.writeFile(IMAGE_PATH, Buffer.from('fake-image-data'));

      const DATA_PATH = path.join(TEST_FILES_DIR, 'image.csv');
      await fs.writeFile(DATA_PATH, `key,value\nimagePath,${IMAGE_PATH}`);

      const result = await processMarkdownTemplate(IMAGE_TEMPLATE_PATH, DATA_PATH);

      // Verificar que la imagen se procese en formato Markdown
      expect(result.content).toMatch(
        /<p>!\[Test\]\(<span class="imported-value" data-field="imagePath">[^<]+<\/span>\)<\/p>/
      );
    });

    test('should process links correctly', async () => {
      const DATA_PATH = path.join(TEST_FILES_DIR, 'link.csv');
      await fs.writeFile(DATA_PATH, 'key,value\nurl,https://example.com');

      const result = await processMarkdownTemplate(LINK_TEMPLATE_PATH, DATA_PATH);

      // Verificar que el enlace se procese correctamente
      expect(result.content).toMatch(
        /<p>\[Link\]\(<span class="imported-value" data-field="url"><a href="">[^<]*<\/a><\/span>\)<\/p>/
      );
    });
  });

  describe('PDF Generation', () => {
    test('should generate PDF with correct metadata', async () => {
      const TEMPLATE_PATH = path.join(TEST_FILES_DIR, 'meta.md');
      await fs.writeFile(TEMPLATE_PATH, '# {{title}}');

      const DATA_PATH = path.join(TEST_FILES_DIR, 'meta.csv');
      await fs.writeFile(DATA_PATH, 'key,value\ntitle,Test Document');

      const result = await testUtils.pdf.queuePdfGeneration(async () => {
        return await processMarkdownTemplate(TEMPLATE_PATH, DATA_PATH);
      });

      expect(result.files.pdf).toBeTruthy();
      expect(typeof result.files.pdf).toBe('string');
      expect(result.files.pdf.endsWith('.pdf')).toBe(true);
    });

    test('should handle PDF generation errors gracefully', async () => {
      const TEMPLATE_PATH = path.join(TEST_FILES_DIR, 'invalid.md');
      await fs.writeFile(TEMPLATE_PATH, '# {{title}}');

      const DATA_PATH = path.join(TEST_FILES_DIR, 'meta.csv');
      await fs.writeFile(DATA_PATH, 'key,value\ntitle,Invalid Document');

      await expect(
        testUtils.pdf.queuePdfGeneration(async () => {
          return await processMarkdownTemplate(TEMPLATE_PATH, DATA_PATH);
        })
      ).rejects.toThrow();
    });

    afterEach(async () => {
      await testUtils.pdf.cleanupPdfFiles(TEST_OUTPUT_DIR);
    });
  });

  describe('Error Handling', () => {
    test('should handle non-existent template file', async () => {
      // Arrange
      const nonExistentPath = path.join(TEST_FILES_DIR, 'non-existent.md');
      const dataPath = path.join(TEST_FILES_DIR, 'simple.csv');

      // Act & Assert
      await expect(processMarkdownTemplate(nonExistentPath, dataPath)).rejects.toThrow(
        'Template file not found or not accessible'
      );
    });

    test('should handle non-existent data file', async () => {
      // Arrange
      const templatePath = path.join(TEST_FILES_DIR, 'simple.md');
      const nonExistentPath = path.join(TEST_FILES_DIR, 'non-existent.csv');

      // Act & Assert
      await expect(processMarkdownTemplate(templatePath, nonExistentPath)).rejects.toThrow(
        'Data file not found or not accessible'
      );
    });

    test('should handle invalid CSV data', async () => {
      // Arrange
      const templatePath = path.join(TEST_FILES_DIR, 'simple.md');
      const invalidDataPath = path.join(TEST_FILES_DIR, 'invalid.csv');
      await fs.writeFile(invalidDataPath, 'invalid,csv,format\nno,key,column');

      // Act & Assert
      await expect(processMarkdownTemplate(templatePath, invalidDataPath)).rejects.toThrow();
    });
  });
});
