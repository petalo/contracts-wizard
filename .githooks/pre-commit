#!/bin/sh

# Pre-commit checks:
# 1. JSDoc documentation and linting (ESLint)
# 2. Logger metadata
# 3. Tests (Jest)

echo "üîç Running pre-commit checks..."

# Project structure:
# - bin/         -> CLI executables
# - scripts/     -> Development scripts
# - src/         -> Source code (following JavaScript conventions)
# - templates/   -> User template files (not in repository)
# - tests/       -> Test files (following Jest conventions)
# - data-csv/    -> Generated CSV files (not in repository)

# Get list of staged JavaScript files
STAGED_JS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.js$' || true)

# Skip checks if no JavaScript files are staged
if [ -z "$STAGED_JS_FILES" ]; then
  echo "‚ú® No JavaScript files to check"
  exit 0
fi

# Log files that will be checked
echo "üìù Checking files:"
echo "$STAGED_JS_FILES" | sed 's/^/  - /'

# 1. Run ESLint (includes JSDoc and general linting)
echo "üìö Running ESLint (includes JSDoc and code style)..."
if ! npx eslint --config eslint.config.js $STAGED_JS_FILES; then
  echo "‚ùå Error: ESLint checks failed!"
  exit 1
fi

# 2. Check logger calls for required metadata (blocking)
echo "üìã Checking logger metadata..."
for file in $STAGED_JS_FILES; do
  # Search for logger calls
  LOGGER_CALLS=$(grep -n "logger\.\(error\|warn\|info\|debug\)" "$file" || true)

  if [ ! -z "$LOGGER_CALLS" ]; then
    # For each line with a logger, verify that it has context and filename
    echo "$LOGGER_CALLS" | while IFS=: read -r line_number content; do
      # Get the complete logger block (may span multiple lines)
      START_LINE=$((line_number - 0))
      END_LINE=$((line_number + 10)) # Buscar hasta 10 l√≠neas despu√©s
      LOG_BLOCK=$(sed -n "${START_LINE},${END_LINE}p" "$file" | tr '\n' ' ')

      # Check if the log block contains both 'context' and 'filename' keys
      if ! echo "$LOG_BLOCK" | grep -q "context.*:" || ! echo "$LOG_BLOCK" | grep -q "filename.*:"; then
        echo "‚ùå Error: Invalid logger call in $file at line $line_number"
        echo "Logger calls must include both 'context' and 'filename' keys"
        echo "Found issue in line:"
        echo "  - $line_number: $content"
        exit 1
      fi
    done
  fi
done

# 3. Run tests only for modified files (non-blocking for setup/config files)
echo "üß™ Running tests for modified files..."
if [ ! -z "$STAGED_JS_FILES" ]; then
  # Determine if we're only modifying setup/config files
  ONLY_SETUP_FILES=true
  for file in $STAGED_JS_FILES; do
    case "$file" in
    scripts/* | .githooks/* | config/* | jest.config.* | babel.config.* | eslint.config.* | .*.js)
      continue
      ;;
    *)
      ONLY_SETUP_FILES=false
      break
      ;;
    esac
  done

  # Run tests with appropriate flags
  if [ "$ONLY_SETUP_FILES" = true ]; then
    echo "‚ÑπÔ∏è  Only setup/config files modified, skipping tests"
    exit 0
  else
    if ! npm test -- --findRelatedTests $STAGED_JS_FILES --passWithNoTests; then
      echo "‚ùå Error: Tests failed!"
      exit 1
    fi
  fi
fi

echo "‚úÖ All pre-commit checks passed!"
