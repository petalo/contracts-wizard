#!/bin/sh

# Pre-commit checks:
# 1. JSDoc documentation
# 2. Code style (ESLint)
# 3. Logger metadata
# 4. Tests (Jest)

echo "🔍 Running pre-commit checks..."

# Project structure:
# - bin/         -> CLI executables
# - scripts/     -> Development scripts
# - src/         -> Source code (following JavaScript conventions)
# - templates/   -> User template files (not in repository)
# - tests/       -> Test files (following Jest conventions)
# - data-csv/    -> Generated CSV files (not in repository)

# Get list of staged JavaScript files
STAGED_JS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.js$')

# Skip checks if no JavaScript files are staged
if [ -z "$STAGED_JS_FILES" ]; then
  echo "✨ No JavaScript files to check"
  exit 0
fi

# Log files that will be checked
echo "📝 Checking files:"
echo "$STAGED_JS_FILES" | sed 's/^/  - /'

# 1. Check JSDoc documentation
echo "📚 Checking JSDoc documentation..."
if ! npx eslint --config eslint.config.js $STAGED_JS_FILES; then
  echo "❌ Error: JSDoc documentation is incomplete or invalid!"
  exit 1
fi

# 2. Run linter only on staged files
echo "🔍 Running linter..."
if ! npx eslint $STAGED_JS_FILES; then
  echo "❌ Error: Code must pass linting before commit!"
  exit 1
fi

# 3. Check logger calls for required metadata
echo "📋 Checking logger metadata..."
for file in $STAGED_JS_FILES; do
  # Buscar llamadas a logger sin context o filename
  INVALID_LOGS=$(grep -n "logger\.\(error\|warn\|info\|debug\)" "$file" | grep -v "context.*filename\|filename.*context")
  if [ ! -z "$INVALID_LOGS" ]; then
    echo "❌ Error: Invalid logger calls in $file"
    echo "Logger calls must include both 'context' and 'filename' keys"
    echo "Found issues in these lines:"
    echo "$INVALID_LOGS" | sed 's/^/  - /'
    exit 1
  fi
done

# 4. Run tests (blocking)
echo "🧪 Running tests..."
if ! npm test; then
  echo "❌ Error: All tests must pass before commit!"
  exit 1
fi

echo "✅ All pre-commit checks passed!"
